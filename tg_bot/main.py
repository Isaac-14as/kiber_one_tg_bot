from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, BotCommand, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import re
import gspread
from datetime import datetime
import pytz
import os

from dotenv import load_dotenv


load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
MENAGER = int(os.getenv('MENAGER'))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

gc = gspread.service_account(filename='creads.json')
wks_all = gc.open("kiber_one_bot").sheet1
wks_users = gc.open("kiber_one_bot").worksheet('–í—Å–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')


USERS = {}


class Form(StatesGroup):
    waiting_phone_number = State()
    waiting_first_name = State()
    waiting_new_start_text = State()


@router.callback_query(F.data)
async def button_callback(callback_query: CallbackQuery, state: FSMContext):
    message = callback_query.message
    data = callback_query.data
    if data in ('–†–∞–º–µ–Ω—Å–∫–æ–µ', '–õ—é–±–µ—Ä—Ü—ã', '–ñ—É–∫–æ–≤—Å–∫–∏–π'):
        utc_now = datetime.now(pytz.utc)
        moscow_tz = pytz.timezone("Europe/Moscow")
        moscow_time = utc_now.astimezone(moscow_tz)
        USERS[callback_query.from_user.id] = {
                      'city': data,
                      'username': callback_query.from_user.username,
                      'age': None,
                      'phone': None,
                      'date': moscow_time.strftime("%d-%m-%Y"),
                      'time': moscow_time.strftime("%H:%M"),
                      'first_name': None,
                      'source': 'TG'
                      }
        age_menu = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"6-8 –ª–µ—Ç", callback_data=f"6-8")],
                [InlineKeyboardButton(text=f"9-11 –ª–µ—Ç", callback_data=f"9-11")],
                [InlineKeyboardButton(text=f"12-14 –ª–µ—Ç", callback_data=f"12-14")]])
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ <b>–≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞</b>, —á—Ç–æ–±—ã –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –Ω–µ–≥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—Éüëá", parse_mode=ParseMode.HTML, reply_markup=age_menu)
        await state.clear()
        return
    
    if data in ('6-8', '9-11', '12-14'):
        USERS[callback_query.from_user.id]['age'] = data
        await message.answer(text="–ö–∞–∫ –∫ <b>–í–∞–º –º–æ–∂–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è</b> –º–µ–Ω–µ–¥–∂–µ—Ä?", parse_mode=ParseMode.HTML)
        await state.set_state(Form.waiting_first_name)
        return
    
    if data == 'yes':
        await state.clear()
        await message.answer(text="–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã, <b>–æ–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞</b>!", parse_mode=ParseMode.HTML)
        all_data = wks_all.get_all_values()[1::]
        all_data.append(list(USERS[callback_query.from_user.id].values()))
        wks_all.update(all_data, 'A2')
        wks_all.format(f'A2:H{len(all_data) + 1}', {
            "borders": {
                "top": {"style": "SOLID"},
                "bottom": {"style": "SOLID"},
                "left": {"style": "SOLID"},
                "right": {"style": "SOLID"}
            }
        })

        try:
            info = f'''<b>–ì–æ—Ä–æ–¥:</b> {USERS[callback_query.from_user.id]['city']}
<b>–¢–ì:</b> @{USERS[callback_query.from_user.id]['username']}
<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {USERS[callback_query.from_user.id]['age']} –ª–µ—Ç
<b>–ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è:</b> {USERS[callback_query.from_user.id]['first_name']}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {USERS[callback_query.from_user.id]['phone']}
<b>–î–∞—Ç–∞/–≤—Ä–µ–º—è:</b> {USERS[callback_query.from_user.id]['date']} {USERS[callback_query.from_user.id]['time']}'''
            await bot.send_message(chat_id=MENAGER, parse_mode=ParseMode.HTML, text=info)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {MENAGER}: {e}")
        return
    
    if data == 'no':
        await state.clear()
        await callback_sing_up(message, state)
        return





@router.message(Form.waiting_first_name)
async def waiting_first_name(message: Message, state: FSMContext):
    USERS[message.from_user.id]['first_name'] = message.text
    text = '''–°–ø–∞—Å–∏–±–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥üòä

–£–∫–∞–∂–∏—Ç–µ <b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>. –ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ü§ó
'''
    await message.answer(text=text, parse_mode=ParseMode.HTML)
    await state.set_state(Form.waiting_phone_number)
    return



@router.message(Form.waiting_phone_number)
async def get_phone_number(message: Message, state: FSMContext):
    pattern = r'^(\+7|8)[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    if re.match(pattern, message.text) is None:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ <b>–Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b>–µ—â–µ —Ä–∞–∑</b>:", parse_mode=ParseMode.HTML)
        return
    USERS[message.from_user.id]['phone'] = message.text

    text = f'''–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. 

–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–º–µ–ª–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ <b>"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!"</b> –∏ –∂–¥–∏—Ç–µ –∑–≤–æ–Ω–∫–∞ –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞üòä.

    ‚Ä¢ <b>–ì–æ—Ä–æ–¥:</b> {USERS[message.from_user.id]['city']}
    ‚Ä¢ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {USERS[message.from_user.id]['age']} –ª–µ—Ç
    ‚Ä¢ <b>–ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è:</b> {USERS[message.from_user.id]['first_name']}
    ‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {USERS[message.from_user.id]['phone']}

–ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ <b>"–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏("</b> –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.
            '''
    answer_menu = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏(", callback_data=f"no"),
                InlineKeyboardButton(text=f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è!", callback_data=f"yes")]])
    
    await message.answer(text=text, parse_mode=ParseMode.HTML, reply_markup=answer_menu)
    await state.clear()
    return

    


@router.message(Command(commands=['start']))
async def callback_start(message: Message, state: FSMContext):
    utc_now = datetime.now(pytz.utc)
    moscow_tz = pytz.timezone("Europe/Moscow")
    moscow_time = utc_now.astimezone(moscow_tz)
    all_data = wks_users.get_all_values()[1::]
    all_data.append([message.from_user.id, message.from_user.username, moscow_time.strftime("%d-%m-%Y"), moscow_time.strftime("%H:%M")])
    wks_users.update(all_data, 'A2')

    await state.clear()
    if message.from_user.id == MENAGER:
        commands = [
            BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
            BotCommand(command='sign_up', description='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'),
            BotCommand(command='set_start_text', description='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞'),
            ]
        await bot.set_my_commands(commands)
    with open('start_text.txt', 'r', encoding='utf-8') as file:
        await message.answer_photo(photo=FSInputFile('start.jpeg'), caption=file.read().strip(), parse_mode=ParseMode.HTML)
    await callback_sing_up(message, state)
    return


@router.message(Command(commands=['sign_up']))
async def callback_sing_up(message: Message, state: FSMContext):
    await state.clear()
    city_menu = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=f"–†–∞–º–µ–Ω—Å–∫–æ–µ", callback_data=f"–†–∞–º–µ–Ω—Å–∫–æ–µ")],
                [InlineKeyboardButton(text=f"–õ—é–±–µ—Ä—Ü—ã", callback_data=f"–õ—é–±–µ—Ä—Ü—ã")],
                [InlineKeyboardButton(text=f"–ñ—É–∫–æ–≤—Å–∫–∏–π", callback_data=f"–ñ—É–∫–æ–≤—Å–∫–∏–π")]])
    await message.answer(text="–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—ã–±–µ—Ä–∏—Ç–µ <b>–≥–æ—Ä–æ–¥</b> üëá", parse_mode=ParseMode.HTML, reply_markup=city_menu)
    return



@router.message(Command(commands=['set_start_text']))
async def callback_set_start_text(message: Message, state: FSMContext):
    with open('start_text.txt', 'r', encoding='utf-8') as file:
        await message.answer(text=file.read().strip(), parse_mode=ParseMode.HTML)
        await state.set_state(Form.waiting_new_start_text)
        return



@router.message(Form.waiting_new_start_text)
async def get_new_start_text(message: Message, state: FSMContext):
    if message.text not in ('/start', '/sign_up', '/set_start_text'):
        with open('start_text.txt', 'w', encoding='utf-8') as file:
            file.write(message.text)
            await message.answer(text="–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", parse_mode=ParseMode.HTML)
        return



async def set_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand(command='start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='sign_up', description='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'),
    ])


async def on_startup(dispatcher: Dispatcher, bot: Bot):
    await set_commands(bot)

if __name__ == '__main__':
    dp.include_router(router)
    dp.startup.register(on_startup)
    dp.run_polling(bot, skip_updates=True)